[{"/Users/alisonqiu/Downloads/wordle/wordle_client/src/index.js":"1","/Users/alisonqiu/Downloads/wordle/wordle_client/src/App.jsx":"2","/Users/alisonqiu/Downloads/wordle/wordle_client/src/Words.js":"3","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Alert.js":"4","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Keyboard.js":"5","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Header.js":"6","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Gameover.js":"7","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Board.js":"8","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Key.js":"9","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Confetti.js":"10","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Letter.js":"11","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/alerts/invalidAlert.js":"12","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/alerts/DeleteAlert.js":"13","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/alerts/enterFiveAlert.js":"14","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Socket.js":"15","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Chat.js":"16"},{"size":235,"mtime":1652748485280,"results":"17","hashOfConfig":"18"},{"size":6314,"mtime":1655776024625,"results":"19","hashOfConfig":"18"},{"size":729,"mtime":1655764359063,"results":"20","hashOfConfig":"18"},{"size":468,"mtime":1652748485153,"results":"21","hashOfConfig":"18"},{"size":2563,"mtime":1652748485153,"results":"22","hashOfConfig":"18"},{"size":4399,"mtime":1654465596640,"results":"23","hashOfConfig":"18"},{"size":1578,"mtime":1652748485153,"results":"24","hashOfConfig":"18"},{"size":2029,"mtime":1655765797744,"results":"25","hashOfConfig":"18"},{"size":1332,"mtime":1652748485153,"results":"26","hashOfConfig":"18"},{"size":1503,"mtime":1652748485153,"results":"27","hashOfConfig":"18"},{"size":1707,"mtime":1655765924688,"results":"28","hashOfConfig":"18"},{"size":698,"mtime":1652748485154,"results":"29","hashOfConfig":"18"},{"size":917,"mtime":1652748485153,"results":"30","hashOfConfig":"18"},{"size":705,"mtime":1652748485154,"results":"31","hashOfConfig":"18"},{"size":1170,"mtime":1654467311500,"results":"32","hashOfConfig":"18"},{"size":2214,"mtime":1653057930808,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"87pl1c",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/alisonqiu/Downloads/wordle/wordle_client/src/index.js",[],[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/App.jsx",["91","92","93"],[],"import React, { useState, createContext, useEffect } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport { useTheme, createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { Box, Typography } from \"@mui/material\";\nimport Header from \"./components/Header\";\nimport GameOver from \"./components/Gameover\";\nimport Keyboard from \"./components/Keyboard\";\nimport Alert from \"./components/Alert\";\nimport Socket from \"./components/Socket\";\nimport Board from \"./components/Board\";\nimport { defaultBoard } from \"./Words\";\nimport { generateWordSet } from \"./Words\";\nimport pinkBg from \"./images/pinkbg.jpg\";\nimport wood from \"./images/wood.jpg\";\nimport Button from '@mui/material/Button';\nimport SwipeableDrawer from '@mui/material/SwipeableDrawer';\nimport ChatIcon from '@mui/icons-material/Chat';\n\n\nexport const AppContext = createContext();\n\nfunction App() {\n\n  let currWord = \"\";\n\n  const [board, setBoard] = useState(defaultBoard);\n  const [currAttempt, setCurrAttempt] = useState({ row: 0, col: 0 });\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false,\n  });\n  const [darkMode, setDarkMode] = useState(false);\n  //alerts\n  const [invalid, setInvalid] = React.useState(false);\n  const [deleteLetter, setDelete] = React.useState(false);\n  const [enter, setEnter] = React.useState(false);\n  const [enterFive, setEnterFive] = React.useState(false);\n  const [won, setWon] = React.useState(false);\n  //socket\n  const [open, setOpen] = React.useState(false);\n\n\n  //genrate correct word with api\n  useEffect(()=>{\n    generateWordSet().then((word)=>{\n      setCorrectWord(word.todaysWord);\n    })\n  },[])\n\n\n  const toggleDrawer = (newOpen) => () => {\n    setOpen(newOpen);\n  };\n\n  //functions for select and delete letters\n  const onEnterLetter = () => {\n    //warning message if not enough letters entered\n    if (currAttempt.col < 4) {\n      setEnter(true);\n      console.log(\"enter is now \" + enter);\n      return;\n    } else {\n      //otherwise, form currWord based on the 5 letters we entered\n      //and check if it's correct\n      for (let i = 0; i < 5; i++) {\n        currWord += board[currAttempt.row][i];\n      }\n      if (currWord.toLocaleLowerCase() === correctWord) {\n        setWon(!won);\n        setGameOver({\n          gameOver: true,\n          guessedWord: true,\n        });\n        return;\n      } else if (currAttempt.row === 5) {\n        setGameOver({\n          gameOver: true,\n          guessedWord: false,\n        });\n      } else {\n        //with api\n        //check if currWord is in wordbank\n        fetch(`http://localhost:8000/check/?word=${currWord.toLowerCase()}`)\n        .then(response => response.json())\n        .then(json => {\n            if (json === 'Entry word not found') {\n                console.log((currWord+' is not a valid word'))\n                setInvalid(!invalid)\n                return\n            } else {\n              //if so, go to the next line\n            console.log(currWord+'is valid word')\n            setCurrAttempt({row: currAttempt.row+1, col:0})\n            }}).catch((error) => {\n              console.error(error)\n          })\n      }\n    }\n  };\n\n  const onDeleteLetter = () => {\n    //warning message if try to delete the 0th letter\n    if (currAttempt.col === 0) {\n      setDelete(!deleteLetter);\n      return;\n    }\n    //otherwise, delete current letter\n    const newBoard = [...board];\n    newBoard[currAttempt.row][currAttempt.col - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, col: currAttempt.col - 1 });\n  };\n  const onSelectLetter = (keyVal) => {\n   if (open === false) {\n    if (currAttempt.col > 4) {\n      console.log(\"can't enter more than 5 letters\");\n      setEnterFive(true);\n      return;\n    }\n    const newBoard = [...board];\n    newBoard[currAttempt.row][currAttempt.col] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, col: currAttempt.col + 1 });\n   }\n  };\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: \"dark\",\n      primary: {\n        main: \"#ffffff\",\n        darker: \"#053e85\",\n      },\n    },\n  });\n\n  const lightTheme = createTheme({\n    palette: {\n      mode: \"light\",\n      background: {\n        default: \"#303030\",  \n      },\n    },\n  });\n\n  const sectionStyle = {\n    backgroundImage: darkMode ? `url(${pinkBg})` : `url(${wood})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    height: \"100vh\",\n  };\n\n  return (\n    <ThemeProvider theme={darkMode ? darkTheme : lightTheme}>\n      <Paper\n        sx={{ textAlign: \"center\", width: \"100vw\", height: \"100vh\" }}\n        style={sectionStyle}\n      >\n        {/*everything inside <AppContext.Provider> have access to states we pass in  */}\n        <AppContext.Provider\n          value={{\n            correctWord,\n            board,\n            setBoard,\n            currAttempt,\n            setCurrAttempt,\n            onSelectLetter,\n            onDeleteLetter,\n            onEnterLetter,\n            setBoard,\n            guessedLetters,\n            setGuessedLetters,\n            gameOver,\n            darkMode,\n            setDarkMode,\n            invalid,\n            deleteLetter,\n            enter,\n            won,\n            enterFive,\n          }}\n        >\n          <Header />\n          <Button  \n            sx={{ color: 'green', borderColor: 'green', mb:'20px', fontSize:'15px'}}\n            size=\"small\" \n            endIcon={<ChatIcon/>} \n            onClick={toggleDrawer(true) }>Chat with a friend!</Button>\n          <SwipeableDrawer\n        anchor=\"right\"\n        open={open}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        swipeAreaWidth={65}\n        disableSwipeToOpen={false}\n        ModalProps={{\n          keepMounted: true,\n        }}\n      >\n\n        <Box\n          sx={{\n            pt: 2,\n            height: '100%',\n            overflow: 'auto',\n          }}\n        >\n           <Socket/>\n        </Box>\n      </SwipeableDrawer>\n          <Alert word={currWord} />\n          {gameOver.gameOver ? <GameOver /> : <Board />}\n          {gameOver.gameOver ? \"\" : <Keyboard />}\n        </AppContext.Provider>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","/Users/alisonqiu/Downloads/wordle/wordle_client/src/Words.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Alert.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Keyboard.js",["94"],[],"import React, { useCallback, useContext,useEffect } from \"react\"\nimport { AppContext } from \"../App\";\nimport Grid from '@mui/material/Grid';\nimport Key from \"./Key\";\n\nconst line1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\nconst line2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\nconst line3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\n\nexport default function Keyboard() {\n    const{onSelectLetter, onDeleteLetter, onEnterLetter,guessedLetters} = useContext(AppContext)\n\n    //handle when user enters the letters through keyboard\n    //use useCallback to prevent unnecesarry updating \n    const handleKeyboard = useCallback((event)=>{\n        //event tells me what letter is entered\n        if (event.key === \"Enter\"){\n            onEnterLetter()\n        }else if (event.key === \"Backspace\"){\n            onDeleteLetter()\n        }else{\n            //loop through every key in line 1,2,3 to check if the pressed\n            //key equals one of them\n            line1.forEach((key) => {\n                if(event.key.toUpperCase() === key.toUpperCase()){\n                    onSelectLetter(key)\n                }\n            })\n            line2.forEach((key) => {\n                if(event.key.toUpperCase() === key.toUpperCase()){\n                    onSelectLetter(key)\n                }\n            })\n            line3.forEach((key) => {\n                if(event.key.toUpperCase() === key.toUpperCase()){\n                    onSelectLetter(key)\n                }\n            })\n        }\n    })\n\n    useEffect(()=>{\n        document.addEventListener(\"keydown\",handleKeyboard)\n        //remove event listener after we're done\n        return ()=>{\n            document.removeEventListener(\"keydown\",handleKeyboard)\n        }\n    },[handleKeyboard])\n      \n    return (\n        <Grid  className=\"key-container\" onKeyDown={handleKeyboard}>\n            <Grid className=\"line1\">\n                {line1.map((key) => {\n                    return <Key keyVal={key} guessed={guessedLetters.includes(key)}/>;\n                })}\n            </Grid>\n            <Grid className=\"line2\">\n                {line2.map((key) => {\n                    return <Key keyVal={key} guessed={guessedLetters.includes(key)}/>;\n                })}\n            </Grid>\n      \n            <Grid className=\"line3\">\n                <Key keyVal={\"ENTER\"} />\n                {line3.map((key) => {\n                return <Key keyVal={key} guessed={guessedLetters.includes(key)}/>;\n                })}\n                <Key keyVal={\"DELETE\"} />\n            </Grid>\n        </Grid>\n    )\n}","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Header.js",["95"],[],"import React,{useContext} from \"react\"\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport EqualizerIcon from '@mui/icons-material/Equalizer';\nimport Switch from '@mui/material/Switch';\nimport { AppContext } from \"../App\";\nimport {styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport pinkBg from \"../../src/images/pinkbgreverse.jpg\"\n\nexport default function Header() {\n\n    const {darkMode,setDarkMode} = useContext(AppContext)\n    const DarkModeSwitch = styled(Switch)(({ theme }) => ({\n        width: 62,\n        height: 34,\n        padding: 7,\n        '& .MuiSwitch-switchBase': {\n          margin: 1,\n          padding: 0,\n          transform: 'translateX(6px)',\n          '&.Mui-checked': {\n            color: '#fff',\n            transform: 'translateX(22px)',\n            '& .MuiSwitch-thumb:before': {\n              backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\n                '#fff',\n              )}\" d=\"M4.2 2.5l-.7 1.8-1.8.7 1.8.7.7 1.8.6-1.8L6.7 5l-1.9-.7-.6-1.8zm15 8.3a6.7 6.7 0 11-6.6-6.6 5.8 5.8 0 006.6 6.6z\"/></svg>')`,\n            },\n            '& + .MuiSwitch-track': {\n              opacity: 1,\n              backgroundColor: theme.palette.mode === 'dark' ? '#8796A5' : '#aab4be',\n            },\n          },\n        },\n        '& .MuiSwitch-thumb': {\n          backgroundColor: theme.palette.mode === 'dark' ? '#003892' : '#001e3c',\n          width: 32,\n          height: 32,\n          '&:before': {\n            content: \"''\",\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            left: 0,\n            top: 0,\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 20 20\"><path fill=\"${encodeURIComponent(\n              '#fff',\n            )}\" d=\"M9.305 1.667V3.75h1.389V1.667h-1.39zm-4.707 1.95l-.982.982L5.09 6.072l.982-.982-1.473-1.473zm10.802 0L13.927 5.09l.982.982 1.473-1.473-.982-.982zM10 5.139a4.872 4.872 0 00-4.862 4.86A4.872 4.872 0 0010 14.862 4.872 4.872 0 0014.86 10 4.872 4.872 0 0010 5.139zm0 1.389A3.462 3.462 0 0113.471 10a3.462 3.462 0 01-3.473 3.472A3.462 3.462 0 016.527 10 3.462 3.462 0 0110 6.528zM1.665 9.305v1.39h2.083v-1.39H1.666zm14.583 0v1.39h2.084v-1.39h-2.084zM5.09 13.928L3.616 15.4l.982.982 1.473-1.473-.982-.982zm9.82 0l-.982.982 1.473 1.473.982-.982-1.473-1.473zM9.305 16.25v2.083h1.389V16.25h-1.39z\"/></svg>')`,\n          },\n        },\n        '& .MuiSwitch-track': {\n          opacity: 1,\n          backgroundColor: theme.palette.mode === 'dark' ? '#8796A5' : '#aab4be',\n          borderRadius: 20 / 2,\n        },\n      }));\n    const theme = createTheme({\n        components: {\n          MuiTypography: {\n            defaultProps: {\n              fontFamily:[\n                'Chilanka',\n                'cursive',\n              ].join(','),\n            },\n          },\n        },\n        palette: {\n          primary: {\n            main: '#000000',\n            contrastText: '#fff',\n          },\n          secondary: {\n            main: '#ffffff',\n            contrastText: '#0000000',\n          },\n        },\n});\n      \n\n    return (\n    <ThemeProvider theme={theme}>\n    <Box    \n    sx={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: '1px black'}}>\n    <Button color ={darkMode?'secondary':'primary'} endIcon={<EqualizerIcon/>}>stats</Button>\n    <Box \n\n        sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            textAlign: 'center',\n            border: '1 solid black',\n            p: 3,\n            fontFamily: 'Roboto',\n            fontWeight:'Bold',\n            margin:'auto',\n            height:'27px'\n          }}\n        className=\"title-container\">\n        <Typography variant=\"h3\" >Wordle</Typography>\n        </Box> \n\n        <FormControlLabel control={<DarkModeSwitch checked={darkMode} onChange={()=>setDarkMode(!darkMode)}/>}></FormControlLabel>\n        </Box>\n        </ThemeProvider>\n\n    )\n}",[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Gameover.js",["96","97","98"],[],"import React, { useContext } from \"react\"\nimport { AppContext } from \"../App\"\nimport {styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Confetti from \"./Confetti\";\nimport pinkBg from \"../../src/images/pinkbg.jpg\"\nimport Typography from '@mui/material/Typography';\n\nexport default function GameOver() {\n    const{gameOver, setGameOver,correctWord,currAttempt} = useContext(AppContext)\n    const sectionStyle = {\n        backgroundImage:\n          `url(${pinkBg})` ,\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n        height:'100vh'\n      };\n      const theme = createTheme({\n        components: {\n          MuiTypography: {\n            defaultProps: {\n              fontFamily:[\n                'Chilanka',\n                'cursive',\n              ].join(','),\n            },\n          },\n        },\n      });\n    return (\n      <>\n      <Confetti won={gameOver.guessedWord}/>\n      <ThemeProvider theme={theme}>\n    <Grid className=\"gameOver\" >\n      <Typography variant=\"subtitle1\">{gameOver.guessedWord? \"You Correctly Guessed the Word!\": \"You Failed to Guess the Word\"}</Typography>\n      <h1>Correct Word: </h1>\n      <Typography variant=\"h1\">{correctWord}</Typography>\n      {gameOver.guessedWord && (\n        <h3>You guessed in {currAttempt.row+1} attempts</h3>\n      )}\n    </Grid>\n    <Button variant=\"contained\" color=\"secondary\" onClick={() => window.location.reload(false)}>Play again!</Button>\n    </ThemeProvider>\n      </>\n    )\n}","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Board.js",["99","100"],[],"import React, { useState,useEffect, useContext } from \"react\"\nimport Grid from '@mui/material/Grid';\nimport Letter from \"./Letter\"\nimport { AppContext } from \"../App\";\nimport board from \"../images/board.jpg\"\n\nfunction FormRow({row}) {\n    return (\n      <React.Fragment >\n            <Grid item >\n                <Letter row = {row} col={0} />\n            </Grid>\n            <Grid item >\n                <Letter row = {row} col={1} />\n            </Grid>\n            <Grid item >\n                <Letter row = {row} col={2} />\n            </Grid>\n            <Grid item >\n                <Letter row = {row} col={3} />\n            </Grid>\n            <Grid item >\n                <Letter row = {row} col={4} />\n            </Grid>\n        </React.Fragment>\n    );\n  }\n\nexport default function Board(props) {\n  const {darkMode} = useContext(AppContext)\n  const sectionStyle = {\n    backgroundImage: darkMode?\"url('https://images.unsplash.com/photo-1633218388467-539651dcf81f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1932&q=80') \":`url(${board})`,\n    backgroundRepeat: \"no-repeat\",\n    //backgroundSize: \"100%\",\n    backgroundPosition:'center',\n  };\n\n    return (\n        <Grid container \n        style={sectionStyle}\n        display='grid'\n        justifyContent=\"center\"\n        alignItems=\"center\" \n        className=\"board\" \n        sx={{\n          paddingTop:\"30px\",\n          paddingBottom:\"30px\"\n        }}\n        >\n\n        <Grid container spacing='auto' >\n          <FormRow row = {0}/>\n        </Grid>\n        <Grid container spacing='auto' >\n          <FormRow row = {1}/>\n        </Grid>\n        <Grid container spacing='auto' >\n          <FormRow row = {2}/>\n        </Grid>\n        <Grid container spacing='auto' >\n          <FormRow row = {3}/>\n        </Grid>\n        <Grid container spacing='auto' >\n          <FormRow row = {4}/>\n        </Grid>\n        <Grid container spacing='auto' >\n          <FormRow row = {5}/>\n      </Grid> \n    \n\n        </Grid>\n\n    )\n}",[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Key.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Confetti.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Letter.js",["101"],[],"import React, { useContext, useEffect } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Paper from \"@mui/material/Paper\";\nimport { AppContext } from \"../App\";\n\nexport default function Letter({ row, col }) {\n  const { board, correctWord, currAttempt, guessedLetters, setGuessedLetters } =\n    useContext(AppContext);\n\n  const letter = board[row][col];\n\n  //change the color of board based on how correct the letter is\n  const green = correctWord.toUpperCase()[col] === letter;\n  //not correct and not empty and the current word includes this letter\n  const yellow =\n    !green && letter !== \"\" && correctWord.toUpperCase().includes(letter);\n  //only check after enter\n  //console.log(currAttempt.row +\" \"+ row)\n  const letterState =\n    currAttempt.row > row && green\n      ? \"#528d4e\"\n      : currAttempt.row > row && yellow\n      ? \"#b49f39\"\n      : \"3a393c\";\n  //const letterState = currAttempt.row > row && green? green:currAttempt.row > row && yellow? yellow:grey\n  const Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: letterState,\n    padding: theme.spacing(1.7),\n    margin: theme.spacing(0.5),\n    // width: \"3vw\",\n    // height: \"3vw\",\n    width: \"30px\",\n    height: \"30px\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    border: \"1px solid grey\",\n    fontSize: \"30px\",\n    fontWeight: \"bolder\",\n    fontFamily: \"Helvetica Neue\",\n  }));\n\n  //add the incorrect letters to guessedLetters each time we move to a new row\n  useEffect(() => {\n    if (letter !== \"\" && !green && !yellow) {\n      setGuessedLetters((prev) => [...prev, letter]);\n      console.log(\"guessedLetters: \", guessedLetters);\n    }\n  }, [currAttempt.row]);\n\n  return <Item>{letter}</Item>;\n}\n","/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/alerts/invalidAlert.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/alerts/DeleteAlert.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/alerts/enterFiveAlert.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Socket.js",[],[],"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Chat.js",[],[],{"ruleId":"102","severity":1,"message":"103","line":3,"column":10,"nodeType":"104","messageId":"105","endLine":3,"endColumn":18},{"ruleId":"102","severity":1,"message":"106","line":4,"column":15,"nodeType":"104","messageId":"105","endLine":4,"endColumn":25},{"ruleId":"107","severity":1,"message":"108","line":172,"column":13,"nodeType":"109","messageId":"110","endLine":172,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":15,"column":28,"nodeType":"104","endLine":15,"endColumn":39},{"ruleId":"102","severity":1,"message":"113","line":10,"column":8,"nodeType":"104","messageId":"105","endLine":10,"endColumn":14},{"ruleId":"102","severity":1,"message":"114","line":3,"column":9,"nodeType":"104","messageId":"105","endLine":3,"endColumn":15},{"ruleId":"102","severity":1,"message":"115","line":11,"column":21,"nodeType":"104","messageId":"105","endLine":11,"endColumn":32},{"ruleId":"102","severity":1,"message":"116","line":12,"column":11,"nodeType":"104","messageId":"105","endLine":12,"endColumn":23},{"ruleId":"102","severity":1,"message":"117","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"118","line":1,"column":26,"nodeType":"104","messageId":"105","endLine":1,"endColumn":35},{"ruleId":"111","severity":1,"message":"119","line":48,"column":6,"nodeType":"120","endLine":48,"endColumn":23,"suggestions":"121"},"no-unused-vars","'useTheme' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","no-dupe-keys","Duplicate key 'setBoard'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'pinkBg' is defined but never used.","'styled' is defined but never used.","'setGameOver' is assigned a value but never used.","'sectionStyle' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'green', 'guessedLetters', 'letter', 'setGuessedLetters', and 'yellow'. Either include them or remove the dependency array.","ArrayExpression",["122"],{"desc":"123","fix":"124"},"Update the dependencies array to be: [currAttempt.row, green, guessedLetters, letter, setGuessedLetters, yellow]",{"range":"125","text":"126"},[1652,1669],"[currAttempt.row, green, guessedLetters, letter, setGuessedLetters, yellow]"]