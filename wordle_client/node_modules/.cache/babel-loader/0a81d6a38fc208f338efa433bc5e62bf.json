{"ast":null,"code":"var _jsxFileName = \"/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Letter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Paper from \"@mui/material/Paper\";\nimport { AppContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Letter(_ref) {\n  _s();\n\n  let {\n    row,\n    col\n  } = _ref;\n  const {\n    board,\n    correctWord,\n    currAttempt,\n    guessedLetters,\n    setGuessedLetters\n  } = useContext(AppContext);\n  const letter = board[row][col]; //change the color of board based on how correct the letter is\n\n  const green = correctWord.toUpperCase()[col] === letter; //not correct and not empty and the current word includes this letter\n\n  const yellow = !green && letter !== \"\" && correctWord.toUpperCase().includes(letter); //only check after enter\n  //console.log(currAttempt.row +\" \"+ row)\n\n  const letterState = currAttempt.row > row && green ? \"#528d4e\" : currAttempt.row > row && yellow ? \"#b49f39\" : \"3a393c\"; //const letterState = currAttempt.row > row && green? green:currAttempt.row > row && yellow? yellow:grey\n\n  const Item = styled(Paper)(_ref2 => {\n    let {\n      theme\n    } = _ref2;\n    return {\n      backgroundColor: letterState,\n      padding: theme.spacing(1.7),\n      margin: theme.spacing(0.5),\n      // width: \"3vw\",\n      // height: \"3vw\",\n      width: \"30px\",\n      height: \"30px\",\n      textAlign: \"center\",\n      alignItems: \"center\",\n      border: \"1px solid grey\",\n      fontSize: \"30px\",\n      fontWeight: \"bolder\",\n      fontFamily: \"Helvetica Neue\"\n    };\n  }); //add the incorrect letters to guessedLetters each time we move to a new row\n\n  useEffect(() => {\n    if (letter !== \"\" && !green && !yellow) {\n      setGuessedLetters(prev => [...prev, letter]);\n      console.log(\"guessedLetters: \", guessedLetters);\n    }\n  }, [currAttempt.row]);\n  return /*#__PURE__*/_jsxDEV(Item, {\n    children: letter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Letter, \"oNe/Pz4SWpJk+LMaO7tO0qpl/RU=\");\n\n_c = Letter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Letter\");","map":{"version":3,"names":["React","useContext","useEffect","styled","Paper","AppContext","Letter","row","col","board","correctWord","currAttempt","guessedLetters","setGuessedLetters","letter","green","toUpperCase","yellow","includes","letterState","Item","theme","backgroundColor","padding","spacing","margin","width","height","textAlign","alignItems","border","fontSize","fontWeight","fontFamily","prev","console","log"],"sources":["/Users/alisonqiu/Downloads/wordle/wordle_client/src/components/Letter.js"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Paper from \"@mui/material/Paper\";\nimport { AppContext } from \"../App\";\n\nexport default function Letter({ row, col }) {\n  const { board, correctWord, currAttempt, guessedLetters, setGuessedLetters } =\n    useContext(AppContext);\n\n  const letter = board[row][col];\n\n  //change the color of board based on how correct the letter is\n  const green = correctWord.toUpperCase()[col] === letter;\n  //not correct and not empty and the current word includes this letter\n  const yellow =\n    !green && letter !== \"\" && correctWord.toUpperCase().includes(letter);\n  //only check after enter\n  //console.log(currAttempt.row +\" \"+ row)\n  const letterState =\n    currAttempt.row > row && green\n      ? \"#528d4e\"\n      : currAttempt.row > row && yellow\n      ? \"#b49f39\"\n      : \"3a393c\";\n  //const letterState = currAttempt.row > row && green? green:currAttempt.row > row && yellow? yellow:grey\n  const Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: letterState,\n    padding: theme.spacing(1.7),\n    margin: theme.spacing(0.5),\n    // width: \"3vw\",\n    // height: \"3vw\",\n    width: \"30px\",\n    height: \"30px\",\n    textAlign: \"center\",\n    alignItems: \"center\",\n    border: \"1px solid grey\",\n    fontSize: \"30px\",\n    fontWeight: \"bolder\",\n    fontFamily: \"Helvetica Neue\",\n  }));\n\n  //add the incorrect letters to guessedLetters each time we move to a new row\n  useEffect(() => {\n    if (letter !== \"\" && !green && !yellow) {\n      setGuessedLetters((prev) => [...prev, letter]);\n      console.log(\"guessedLetters: \", guessedLetters);\n    }\n  }, [currAttempt.row]);\n\n  return <Item>{letter}</Item>;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,UAAT,QAA2B,QAA3B;;AAEA,eAAe,SAASC,MAAT,OAA8B;EAAA;;EAAA,IAAd;IAAEC,GAAF;IAAOC;EAAP,CAAc;EAC3C,MAAM;IAAEC,KAAF;IAASC,WAAT;IAAsBC,WAAtB;IAAmCC,cAAnC;IAAmDC;EAAnD,IACJZ,UAAU,CAACI,UAAD,CADZ;EAGA,MAAMS,MAAM,GAAGL,KAAK,CAACF,GAAD,CAAL,CAAWC,GAAX,CAAf,CAJ2C,CAM3C;;EACA,MAAMO,KAAK,GAAGL,WAAW,CAACM,WAAZ,GAA0BR,GAA1B,MAAmCM,MAAjD,CAP2C,CAQ3C;;EACA,MAAMG,MAAM,GACV,CAACF,KAAD,IAAUD,MAAM,KAAK,EAArB,IAA2BJ,WAAW,CAACM,WAAZ,GAA0BE,QAA1B,CAAmCJ,MAAnC,CAD7B,CAT2C,CAW3C;EACA;;EACA,MAAMK,WAAW,GACfR,WAAW,CAACJ,GAAZ,GAAkBA,GAAlB,IAAyBQ,KAAzB,GACI,SADJ,GAEIJ,WAAW,CAACJ,GAAZ,GAAkBA,GAAlB,IAAyBU,MAAzB,GACA,SADA,GAEA,QALN,CAb2C,CAmB3C;;EACA,MAAMG,IAAI,GAAGjB,MAAM,CAACC,KAAD,CAAN,CAAc;IAAA,IAAC;MAAEiB;IAAF,CAAD;IAAA,OAAgB;MACzCC,eAAe,EAAEH,WADwB;MAEzCI,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,GAAd,CAFgC;MAGzCC,MAAM,EAAEJ,KAAK,CAACG,OAAN,CAAc,GAAd,CAHiC;MAIzC;MACA;MACAE,KAAK,EAAE,MANkC;MAOzCC,MAAM,EAAE,MAPiC;MAQzCC,SAAS,EAAE,QAR8B;MASzCC,UAAU,EAAE,QAT6B;MAUzCC,MAAM,EAAE,gBAViC;MAWzCC,QAAQ,EAAE,MAX+B;MAYzCC,UAAU,EAAE,QAZ6B;MAazCC,UAAU,EAAE;IAb6B,CAAhB;EAAA,CAAd,CAAb,CApB2C,CAoC3C;;EACA/B,SAAS,CAAC,MAAM;IACd,IAAIY,MAAM,KAAK,EAAX,IAAiB,CAACC,KAAlB,IAA2B,CAACE,MAAhC,EAAwC;MACtCJ,iBAAiB,CAAEqB,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUpB,MAAV,CAAX,CAAjB;MACAqB,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCxB,cAAhC;IACD;EACF,CALQ,EAKN,CAACD,WAAW,CAACJ,GAAb,CALM,CAAT;EAOA,oBAAO,QAAC,IAAD;IAAA,UAAOO;EAAP;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;GA7CuBR,M;;KAAAA,M"},"metadata":{},"sourceType":"module"}