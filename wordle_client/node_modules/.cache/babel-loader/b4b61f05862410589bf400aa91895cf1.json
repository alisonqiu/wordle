{"ast":null,"code":"var _jsxFileName = \"/Users/alisonqiu/code/wordle_client/src/components/Letter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from \"react\"; //import { AppContext } from \"../App\";\n\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { AppContext } from \"../App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Letter(_ref) {\n  _s();\n\n  let {\n    row,\n    col\n  } = _ref;\n  const {\n    board,\n    correctWord,\n    currAttempt,\n    guessedLetters,\n    setGuessedLetters\n  } = useContext(AppContext);\n  const letter = board[row][col]; //change the color of board based on how correct the letter is \n\n  const green = correctWord.toUpperCase()[col] === letter; //not correct and not empty and the current word includes this letter\n\n  const yellow = !green && letter !== \"\" && correctWord.toUpperCase().includes(letter); //only check after enter\n  //console.log(currAttempt.row +\" \"+ row)\n\n  const letterState = currAttempt.row > row && green ? '#528d4e' : currAttempt.row > row && yellow ? '#b49f39' : '3a393c'; //const letterState = currAttempt.row > row && green? green:currAttempt.row > row && yellow? yellow:grey\n\n  {\n    /*mui styling*/\n  }\n  const Item = styled(Paper)(_ref2 => {\n    let {\n      theme\n    } = _ref2;\n    return {\n      backgroundColor: letterState,\n      padding: theme.spacing(1.7),\n      margin: theme.spacing(0.5),\n      width: '3vw',\n      height: '3vw',\n      textAlign: 'center',\n      alignItems: 'center',\n      border: '1px solid grey',\n      //display: 'flex',\n      placeItems: 'center',\n      fontSize: '30px',\n      fontWeight: 'bolder',\n      fontFamily: 'Helvetica Neue'\n    };\n  }); //add the incorrect letters to guessedLetters each time we move to a new row\n\n  useEffect(() => {\n    if (letter !== \"\" && !green && !yellow) {\n      setGuessedLetters(prev => [...prev, letter]);\n      console.log('guessedLetters: ', guessedLetters);\n    }\n  }, [currAttempt.row]);\n  return /*#__PURE__*/_jsxDEV(Item, {\n    placeItems: \"center\",\n    children: letter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Letter, \"HpRL+Lrq/quWgKpl9G67XMAsyT4=\");\n\n_c = Letter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Letter\");","map":{"version":3,"names":["React","useContext","useEffect","styled","createTheme","ThemeProvider","Grid","Paper","AppContext","Letter","row","col","board","correctWord","currAttempt","guessedLetters","setGuessedLetters","letter","green","toUpperCase","yellow","includes","letterState","Item","theme","backgroundColor","padding","spacing","margin","width","height","textAlign","alignItems","border","placeItems","fontSize","fontWeight","fontFamily","prev","console","log"],"sources":["/Users/alisonqiu/code/wordle_client/src/components/Letter.js"],"sourcesContent":["import React,{useContext, useEffect} from \"react\"\n//import { AppContext } from \"../App\";\nimport { styled,createTheme, ThemeProvider } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { AppContext } from \"../App\";\n\nexport default function Letter({row,col}) {\n    const {board, correctWord, currAttempt,guessedLetters, setGuessedLetters} = useContext(AppContext)\n\n    const letter = board[row][col]\n\n    //change the color of board based on how correct the letter is \n    const green = correctWord.toUpperCase()[col] === letter\n    //not correct and not empty and the current word includes this letter\n    const yellow = !green && letter !==\"\" && correctWord.toUpperCase().includes(letter)\n    //only check after enter\n    //console.log(currAttempt.row +\" \"+ row)\n    const letterState = currAttempt.row > row && green? '#528d4e':currAttempt.row > row && yellow? '#b49f39':'3a393c'\n    //const letterState = currAttempt.row > row && green? green:currAttempt.row > row && yellow? yellow:grey\n        {/*mui styling*/}\n        const Item = styled(Paper)(({ theme }) => ({\n            backgroundColor: letterState,\n            padding: theme.spacing(1.7),\n            margin:theme.spacing(0.5),\n            width:  '3vw',\n            height: '3vw',\n            textAlign: 'center',\n            alignItems: 'center',\n            border: '1px solid grey',\n            //display: 'flex',\n            placeItems: 'center',\n            fontSize: '30px',\n            fontWeight: 'bolder',\n            fontFamily: 'Helvetica Neue'\n          }));\n    \n    \n    //add the incorrect letters to guessedLetters each time we move to a new row\n    useEffect(()=>{\n        if (letter !== \"\" && !green && !yellow){\n            setGuessedLetters((prev)=> [...prev, letter])\n            console.log('guessedLetters: ',guessedLetters)\n        }\n    },[currAttempt.row])\n\n    return (\n        <Item  placeItems= 'center'>{letter}</Item>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAA0BC,SAA1B,QAA0C,OAA1C,C,CACA;;AACA,SAASC,MAAT,EAAgBC,WAAhB,EAA6BC,aAA7B,QAAkD,sBAAlD;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,UAAT,QAA2B,QAA3B;;AAEA,eAAe,SAASC,MAAT,OAA2B;EAAA;;EAAA,IAAX;IAACC,GAAD;IAAKC;EAAL,CAAW;EACtC,MAAM;IAACC,KAAD;IAAQC,WAAR;IAAqBC,WAArB;IAAiCC,cAAjC;IAAiDC;EAAjD,IAAsEf,UAAU,CAACO,UAAD,CAAtF;EAEA,MAAMS,MAAM,GAAGL,KAAK,CAACF,GAAD,CAAL,CAAWC,GAAX,CAAf,CAHsC,CAKtC;;EACA,MAAMO,KAAK,GAAGL,WAAW,CAACM,WAAZ,GAA0BR,GAA1B,MAAmCM,MAAjD,CANsC,CAOtC;;EACA,MAAMG,MAAM,GAAG,CAACF,KAAD,IAAUD,MAAM,KAAI,EAApB,IAA0BJ,WAAW,CAACM,WAAZ,GAA0BE,QAA1B,CAAmCJ,MAAnC,CAAzC,CARsC,CAStC;EACA;;EACA,MAAMK,WAAW,GAAGR,WAAW,CAACJ,GAAZ,GAAkBA,GAAlB,IAAyBQ,KAAzB,GAAgC,SAAhC,GAA0CJ,WAAW,CAACJ,GAAZ,GAAkBA,GAAlB,IAAyBU,MAAzB,GAAiC,SAAjC,GAA2C,QAAzG,CAXsC,CAYtC;;EACI;IAAC;EAAgB;EACjB,MAAMG,IAAI,GAAGpB,MAAM,CAACI,KAAD,CAAN,CAAc;IAAA,IAAC;MAAEiB;IAAF,CAAD;IAAA,OAAgB;MACvCC,eAAe,EAAEH,WADsB;MAEvCI,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,GAAd,CAF8B;MAGvCC,MAAM,EAACJ,KAAK,CAACG,OAAN,CAAc,GAAd,CAHgC;MAIvCE,KAAK,EAAG,KAJ+B;MAKvCC,MAAM,EAAE,KAL+B;MAMvCC,SAAS,EAAE,QAN4B;MAOvCC,UAAU,EAAE,QAP2B;MAQvCC,MAAM,EAAE,gBAR+B;MASvC;MACAC,UAAU,EAAE,QAV2B;MAWvCC,QAAQ,EAAE,MAX6B;MAYvCC,UAAU,EAAE,QAZ2B;MAavCC,UAAU,EAAE;IAb2B,CAAhB;EAAA,CAAd,CAAb,CAdkC,CA+BtC;;EACAnC,SAAS,CAAC,MAAI;IACV,IAAIe,MAAM,KAAK,EAAX,IAAiB,CAACC,KAAlB,IAA2B,CAACE,MAAhC,EAAuC;MACnCJ,iBAAiB,CAAEsB,IAAD,IAAS,CAAC,GAAGA,IAAJ,EAAUrB,MAAV,CAAV,CAAjB;MACAsB,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BzB,cAA/B;IACH;EACJ,CALQ,EAKP,CAACD,WAAW,CAACJ,GAAb,CALO,CAAT;EAOA,oBACI,QAAC,IAAD;IAAO,UAAU,EAAE,QAAnB;IAAA,UAA6BO;EAA7B;IAAA;IAAA;IAAA;EAAA,QADJ;AAGH;;GA1CuBR,M;;KAAAA,M"},"metadata":{},"sourceType":"module"}