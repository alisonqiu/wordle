{"ast":null,"code":"import wordBank from \"./wordle-bank.txt\";\nexport const defaultBoard = [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']]; //check if the word I typed exists in this set\n// export const generateWordSet = async () => {\n//     let wordSet;\n//     let todaysWord;\n//     await fetch(wordBank)\n//       .then((response) => response.text())\n//       .then((result) => {\n//         //turn into an array of words\n//         const wordArr = result.split(\"\\n\");\n//         console.log(wordArr)\n//         //pick a random word\n//         todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n//         wordSet = new Set(wordArr);\n//       });\n//     return { wordSet, todaysWord };\n//   };\n\nexport const generateWordSet = async () => {\n  let wordSet;\n  let todaysWord;\n  await fetch('http://localhost:8000/word').then(response => response.text()).then(result => {\n    //turn into an array of words\n    const wordArr = result.split(\"\\n\");\n    console.log(wordArr); //pick a random word\n\n    todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n    wordSet = new Set(wordArr);\n  });\n  return {\n    wordSet,\n    todaysWord\n  };\n};","map":{"version":3,"names":["wordBank","defaultBoard","generateWordSet","wordSet","todaysWord","fetch","then","response","text","result","wordArr","split","console","log","Math","floor","random","length","Set"],"sources":["/Users/alisonqiu/wordle/wordle_client/src/Words.js"],"sourcesContent":["import wordBank from \"./wordle-bank.txt\"\n\nexport const defaultBoard = [\n    ['', '', '', '', ''],\n    ['', '', '', '', ''],\n    ['', '', '', '', ''],\n    ['', '', '', '', ''],\n    ['', '', '', '', ''],\n    ['', '', '', '', '']\n]\n\n//check if the word I typed exists in this set\n// export const generateWordSet = async () => {\n//     let wordSet;\n//     let todaysWord;\n//     await fetch(wordBank)\n//       .then((response) => response.text())\n//       .then((result) => {\n//         //turn into an array of words\n//         const wordArr = result.split(\"\\n\");\n//         console.log(wordArr)\n//         //pick a random word\n//         todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n//         wordSet = new Set(wordArr);\n//       });\n//     return { wordSet, todaysWord };\n//   };\n  \nexport const generateWordSet = async () => {\n  let wordSet;\n  let todaysWord;\n  await fetch('http://localhost:8000/word')\n    .then((response) => response.text())\n    .then((result) => {\n      //turn into an array of words\n      const wordArr = result.split(\"\\n\");\n      console.log(wordArr)\n      //pick a random word\n      todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n      wordSet = new Set(wordArr);\n    });\n  return { wordSet, todaysWord };\n};\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,CACxB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CADwB,EAExB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAFwB,EAGxB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAHwB,EAIxB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAJwB,EAKxB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CALwB,EAMxB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CANwB,CAArB,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAG,YAAY;EACzC,IAAIC,OAAJ;EACA,IAAIC,UAAJ;EACA,MAAMC,KAAK,CAAC,4BAAD,CAAL,CACHC,IADG,CACGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADhB,EAEHF,IAFG,CAEGG,MAAD,IAAY;IAChB;IACA,MAAMC,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAa,IAAb,CAAhB;IACAC,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAHgB,CAIhB;;IACAN,UAAU,GAAGM,OAAO,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,OAAO,CAACO,MAAnC,CAAD,CAApB;IACAd,OAAO,GAAG,IAAIe,GAAJ,CAAQR,OAAR,CAAV;EACD,CATG,CAAN;EAUA,OAAO;IAAEP,OAAF;IAAWC;EAAX,CAAP;AACD,CAdM"},"metadata":{},"sourceType":"module"}